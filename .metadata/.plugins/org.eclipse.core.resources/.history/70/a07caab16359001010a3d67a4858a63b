package com.gupta.feedback_app.controller;

import java.time.LocalDate;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.gupta.feedback_app.entity.User;
import com.gupta.feedback_app.repository.UserRepository;

@CrossOrigin(origins = "http://localhost:4200")
@RestController
@RequestMapping("/api/users")
public class UserController {
	
	@Autowired
	private UserRepository userRepo;
	
	@PostMapping("/user")
	public ResponseEntity<?> createUser(@RequestBody User user) {
		if(userRepo.existsByEmail(user.getEmail())) {
			return ResponseEntity.badRequest().body("user with this email already exist");
		}
		User savedUser = userRepo.save(user);
		return ResponseEntity.ok(savedUser);
		
	}
	
	@GetMapping("/user")
	public ResponseEntity<User> getUser(@RequestParam String email) {
		if(userRepo.existsByEmail(email)) {
			User user = userRepo.findByEmail(email);
			return ResponseEntity.ok(user);
		} else {
			return ResponseEntity.notFound().build();
		}
	}
	
	@GetMapping("/user/validate")
	public ResponseEntity<String> validateUser(@RequestParam String email, @RequestParam String password) {
		if(userRepo.existsByEmail(email)) {
			User user = userRepo.findByEmail(email);
			if(user.getPassword().equals(password)) {
				return ResponseEntity.ok("Valid User");
			}else {
				return ResponseEntity.badRequest().body("Wrong Password");
			}
		} else {
			return ResponseEntity.notFound().build();
		}
	}
	
	@PostMapping("/user/changePassword")
	public ResponseEntity<?> changePassword(@RequestBody Map<String,String> req) {
		String email = req.get("email");
	    String dob = req.get("dob");
	    String newPassword = req.get("newPassword");
		if(userRepo.existsByEmail(email)) {
			User user = userRepo.findByEmail(email);
			if(user.getDob().equals(dob)) {
				user.setPassword(newPassword);
				userRepo.save(user);
				return ResponseEntity.ok("Password Updated Succesfully");
			}else {
				return ResponseEntity.badRequest().body("Wrong Credential");
			}
		} else {
			return ResponseEntity.notFound().build();
		}
	}
	
}
